// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase Rules API (firebaserules/v1)
// Description:
//   Creates and manages rules that determine when a Firebase Rules-enabled
//   service should permit a request.
// Documentation:
//   https://firebase.google.com/docs/storage/security

#import "GTLRFirebaseRulesAPIQuery.h"

#import "GTLRFirebaseRulesAPIObjects.h"

@implementation GTLRFirebaseRulesAPIQuery

@dynamic fields;

@end

@implementation GTLRFirebaseRulesAPIQuery_ProjectsReleasesCreate

@dynamic name;

+ (instancetype)queryWithObject:(GTLRFirebaseRulesAPI_Release *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/releases";
  GTLRFirebaseRulesAPIQuery_ProjectsReleasesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseRulesAPI_Release class];
  query.loggingName = @"firebaserules.projects.releases.create";
  return query;
}

@end

@implementation GTLRFirebaseRulesAPIQuery_ProjectsReleasesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRFirebaseRulesAPIQuery_ProjectsReleasesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseRulesAPI_Empty class];
  query.loggingName = @"firebaserules.projects.releases.delete";
  return query;
}

@end

@implementation GTLRFirebaseRulesAPIQuery_ProjectsReleasesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRFirebaseRulesAPIQuery_ProjectsReleasesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseRulesAPI_Release class];
  query.loggingName = @"firebaserules.projects.releases.get";
  return query;
}

@end

@implementation GTLRFirebaseRulesAPIQuery_ProjectsReleasesList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/releases";
  GTLRFirebaseRulesAPIQuery_ProjectsReleasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseRulesAPI_ListReleasesResponse class];
  query.loggingName = @"firebaserules.projects.releases.list";
  return query;
}

@end

@implementation GTLRFirebaseRulesAPIQuery_ProjectsReleasesUpdate

@dynamic name;

+ (instancetype)queryWithObject:(GTLRFirebaseRulesAPI_Release *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRFirebaseRulesAPIQuery_ProjectsReleasesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseRulesAPI_Release class];
  query.loggingName = @"firebaserules.projects.releases.update";
  return query;
}

@end

@implementation GTLRFirebaseRulesAPIQuery_ProjectsRulesetsCreate

@dynamic name;

+ (instancetype)queryWithObject:(GTLRFirebaseRulesAPI_Ruleset *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/rulesets";
  GTLRFirebaseRulesAPIQuery_ProjectsRulesetsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseRulesAPI_Ruleset class];
  query.loggingName = @"firebaserules.projects.rulesets.create";
  return query;
}

@end

@implementation GTLRFirebaseRulesAPIQuery_ProjectsRulesetsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRFirebaseRulesAPIQuery_ProjectsRulesetsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseRulesAPI_Empty class];
  query.loggingName = @"firebaserules.projects.rulesets.delete";
  return query;
}

@end

@implementation GTLRFirebaseRulesAPIQuery_ProjectsRulesetsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRFirebaseRulesAPIQuery_ProjectsRulesetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseRulesAPI_Ruleset class];
  query.loggingName = @"firebaserules.projects.rulesets.get";
  return query;
}

@end

@implementation GTLRFirebaseRulesAPIQuery_ProjectsRulesetsList

@dynamic name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/rulesets";
  GTLRFirebaseRulesAPIQuery_ProjectsRulesetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseRulesAPI_ListRulesetsResponse class];
  query.loggingName = @"firebaserules.projects.rulesets.list";
  return query;
}

@end

@implementation GTLRFirebaseRulesAPIQuery_ProjectsTest

@dynamic name;

+ (instancetype)queryWithObject:(GTLRFirebaseRulesAPI_TestRulesetRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:test";
  GTLRFirebaseRulesAPIQuery_ProjectsTest *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRFirebaseRulesAPI_TestRulesetResponse class];
  query.loggingName = @"firebaserules.projects.test";
  return query;
}

@end
