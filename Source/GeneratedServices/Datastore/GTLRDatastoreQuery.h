// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Datastore API (datastore/v1)
// Description:
//   Accesses the schemaless NoSQL database to provide fully managed, robust,
//   scalable storage for your application.
// Documentation:
//   https://cloud.google.com/datastore/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDatastore_AllocateIdsRequest;
@class GTLRDatastore_BeginTransactionRequest;
@class GTLRDatastore_CommitRequest;
@class GTLRDatastore_LookupRequest;
@class GTLRDatastore_RollbackRequest;
@class GTLRDatastore_RunQueryRequest;

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Datastore query classes.
 */
@interface GTLRDatastoreQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Allocates IDs for the given keys, which is useful for referencing an entity
 *  before it is inserted.
 *
 *  Method: datastore.projects.allocateIds
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatastore
 *    @c kGTLRAuthScopeDatastoreCloudPlatform
 */
@interface GTLRDatastoreQuery_ProjectsAllocateIds : GTLRDatastoreQuery
// Previous library name was
//   +[GTLQueryDatastore queryForProjectsAllocateIdsWithObject:projectId:]

/** The ID of the project against which to make the request. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDatastore_AllocateIdsResponse.
 *
 *  Allocates IDs for the given keys, which is useful for referencing an entity
 *  before it is inserted.
 *
 *  @param object The @c GTLRDatastore_AllocateIdsRequest to include in the
 *    query.
 *  @param projectId The ID of the project against which to make the request.
 *
 *  @returns GTLRDatastoreQuery_ProjectsAllocateIds
 */
+ (instancetype)queryWithObject:(GTLRDatastore_AllocateIdsRequest *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Begins a new transaction.
 *
 *  Method: datastore.projects.beginTransaction
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatastore
 *    @c kGTLRAuthScopeDatastoreCloudPlatform
 */
@interface GTLRDatastoreQuery_ProjectsBeginTransaction : GTLRDatastoreQuery
// Previous library name was
//   +[GTLQueryDatastore queryForProjectsBeginTransactionWithObject:projectId:]

/** The ID of the project against which to make the request. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDatastore_BeginTransactionResponse.
 *
 *  Begins a new transaction.
 *
 *  @param object The @c GTLRDatastore_BeginTransactionRequest to include in the
 *    query.
 *  @param projectId The ID of the project against which to make the request.
 *
 *  @returns GTLRDatastoreQuery_ProjectsBeginTransaction
 */
+ (instancetype)queryWithObject:(GTLRDatastore_BeginTransactionRequest *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Commits a transaction, optionally creating, deleting or modifying some
 *  entities.
 *
 *  Method: datastore.projects.commit
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatastore
 *    @c kGTLRAuthScopeDatastoreCloudPlatform
 */
@interface GTLRDatastoreQuery_ProjectsCommit : GTLRDatastoreQuery
// Previous library name was
//   +[GTLQueryDatastore queryForProjectsCommitWithObject:projectId:]

/** The ID of the project against which to make the request. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDatastore_CommitResponse.
 *
 *  Commits a transaction, optionally creating, deleting or modifying some
 *  entities.
 *
 *  @param object The @c GTLRDatastore_CommitRequest to include in the query.
 *  @param projectId The ID of the project against which to make the request.
 *
 *  @returns GTLRDatastoreQuery_ProjectsCommit
 */
+ (instancetype)queryWithObject:(GTLRDatastore_CommitRequest *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Looks up entities by key.
 *
 *  Method: datastore.projects.lookup
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatastore
 *    @c kGTLRAuthScopeDatastoreCloudPlatform
 */
@interface GTLRDatastoreQuery_ProjectsLookup : GTLRDatastoreQuery
// Previous library name was
//   +[GTLQueryDatastore queryForProjectsLookupWithObject:projectId:]

/** The ID of the project against which to make the request. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDatastore_LookupResponse.
 *
 *  Looks up entities by key.
 *
 *  @param object The @c GTLRDatastore_LookupRequest to include in the query.
 *  @param projectId The ID of the project against which to make the request.
 *
 *  @returns GTLRDatastoreQuery_ProjectsLookup
 */
+ (instancetype)queryWithObject:(GTLRDatastore_LookupRequest *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Rolls back a transaction.
 *
 *  Method: datastore.projects.rollback
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatastore
 *    @c kGTLRAuthScopeDatastoreCloudPlatform
 */
@interface GTLRDatastoreQuery_ProjectsRollback : GTLRDatastoreQuery
// Previous library name was
//   +[GTLQueryDatastore queryForProjectsRollbackWithObject:projectId:]

/** The ID of the project against which to make the request. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDatastore_RollbackResponse.
 *
 *  Rolls back a transaction.
 *
 *  @param object The @c GTLRDatastore_RollbackRequest to include in the query.
 *  @param projectId The ID of the project against which to make the request.
 *
 *  @returns GTLRDatastoreQuery_ProjectsRollback
 */
+ (instancetype)queryWithObject:(GTLRDatastore_RollbackRequest *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Queries for entities.
 *
 *  Method: datastore.projects.runQuery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatastore
 *    @c kGTLRAuthScopeDatastoreCloudPlatform
 */
@interface GTLRDatastoreQuery_ProjectsRunQuery : GTLRDatastoreQuery
// Previous library name was
//   +[GTLQueryDatastore queryForProjectsRunQueryWithObject:projectId:]

/** The ID of the project against which to make the request. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRDatastore_RunQueryResponse.
 *
 *  Queries for entities.
 *
 *  @param object The @c GTLRDatastore_RunQueryRequest to include in the query.
 *  @param projectId The ID of the project against which to make the request.
 *
 *  @returns GTLRDatastoreQuery_ProjectsRunQuery
 */
+ (instancetype)queryWithObject:(GTLRDatastore_RunQueryRequest *)object
                      projectId:(NSString *)projectId;

@end

NS_ASSUME_NONNULL_END
