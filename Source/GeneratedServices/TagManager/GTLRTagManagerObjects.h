// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Tag Manager API (tagmanager/v1)
// Description:
//   Accesses Tag Manager accounts and containers.
// Documentation:
//   https://developers.google.com/tag-manager/api/v1/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRTagManager_Account;
@class GTLRTagManager_AccountAccess;
@class GTLRTagManager_Condition;
@class GTLRTagManager_Container;
@class GTLRTagManager_ContainerAccess;
@class GTLRTagManager_ContainerVersion;
@class GTLRTagManager_ContainerVersionHeader;
@class GTLRTagManager_Environment;
@class GTLRTagManager_Folder;
@class GTLRTagManager_Macro;
@class GTLRTagManager_Parameter;
@class GTLRTagManager_Rule;
@class GTLRTagManager_SetupTag;
@class GTLRTagManager_Tag;
@class GTLRTagManager_TeardownTag;
@class GTLRTagManager_Trigger;
@class GTLRTagManager_UserAccess;
@class GTLRTagManager_Variable;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRTagManager_AccountAccess.permission

/** Value: "delete" */
GTLR_EXTERN NSString * const kGTLRTagManager_AccountAccess_Permission_Delete;
/** Value: "edit" */
GTLR_EXTERN NSString * const kGTLRTagManager_AccountAccess_Permission_Edit;
/** Value: "manage" */
GTLR_EXTERN NSString * const kGTLRTagManager_AccountAccess_Permission_Manage;
/** Value: "publish" */
GTLR_EXTERN NSString * const kGTLRTagManager_AccountAccess_Permission_Publish;
/** Value: "read" */
GTLR_EXTERN NSString * const kGTLRTagManager_AccountAccess_Permission_Read;

// ----------------------------------------------------------------------------
// GTLRTagManager_Condition.type

/** Value: "contains" */
GTLR_EXTERN NSString * const kGTLRTagManager_Condition_Type_Contains;
/** Value: "cssSelector" */
GTLR_EXTERN NSString * const kGTLRTagManager_Condition_Type_CssSelector;
/** Value: "endsWith" */
GTLR_EXTERN NSString * const kGTLRTagManager_Condition_Type_EndsWith;
/** Value: "equals" */
GTLR_EXTERN NSString * const kGTLRTagManager_Condition_Type_Equals;
/** Value: "greater" */
GTLR_EXTERN NSString * const kGTLRTagManager_Condition_Type_Greater;
/** Value: "greaterOrEquals" */
GTLR_EXTERN NSString * const kGTLRTagManager_Condition_Type_GreaterOrEquals;
/** Value: "less" */
GTLR_EXTERN NSString * const kGTLRTagManager_Condition_Type_Less;
/** Value: "lessOrEquals" */
GTLR_EXTERN NSString * const kGTLRTagManager_Condition_Type_LessOrEquals;
/** Value: "matchRegex" */
GTLR_EXTERN NSString * const kGTLRTagManager_Condition_Type_MatchRegex;
/** Value: "startsWith" */
GTLR_EXTERN NSString * const kGTLRTagManager_Condition_Type_StartsWith;
/** Value: "urlMatches" */
GTLR_EXTERN NSString * const kGTLRTagManager_Condition_Type_UrlMatches;

// ----------------------------------------------------------------------------
// GTLRTagManager_Container.enabledBuiltInVariable

/** Value: "advertiserId" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AdvertiserId;
/** Value: "advertisingTrackingEnabled" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AdvertisingTrackingEnabled;
/** Value: "appId" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AppId;
/** Value: "appName" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AppName;
/** Value: "appVersionCode" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AppVersionCode;
/** Value: "appVersionName" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_AppVersionName;
/** Value: "clickClasses" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickClasses;
/** Value: "clickElement" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickElement;
/** Value: "clickId" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickId;
/** Value: "clickTarget" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickTarget;
/** Value: "clickText" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickText;
/** Value: "clickUrl" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ClickUrl;
/** Value: "containerId" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ContainerId;
/** Value: "containerVersion" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ContainerVersion;
/** Value: "debugMode" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_DebugMode;
/** Value: "deviceName" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_DeviceName;
/** Value: "environmentName" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_EnvironmentName;
/** Value: "errorLine" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ErrorLine;
/** Value: "errorMessage" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ErrorMessage;
/** Value: "errorUrl" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_ErrorUrl;
/** Value: "event" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_Event;
/** Value: "formClasses" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormClasses;
/** Value: "formElement" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormElement;
/** Value: "formId" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormId;
/** Value: "formTarget" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormTarget;
/** Value: "formText" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormText;
/** Value: "formUrl" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_FormUrl;
/** Value: "historySource" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_HistorySource;
/** Value: "htmlId" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_HtmlId;
/** Value: "language" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_Language;
/** Value: "newHistoryFragment" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_NewHistoryFragment;
/** Value: "newHistoryState" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_NewHistoryState;
/** Value: "oldHistoryFragment" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_OldHistoryFragment;
/** Value: "oldHistoryState" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_OldHistoryState;
/** Value: "osVersion" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_OsVersion;
/** Value: "pageHostname" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_PageHostname;
/** Value: "pagePath" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_PagePath;
/** Value: "pageUrl" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_PageUrl;
/** Value: "platform" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_Platform;
/** Value: "randomNumber" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_RandomNumber;
/** Value: "referrer" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_Referrer;
/** Value: "resolution" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_Resolution;
/** Value: "sdkVersion" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_EnabledBuiltInVariable_SdkVersion;

// ----------------------------------------------------------------------------
// GTLRTagManager_Container.usageContext

/** Value: "android" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_Android;
/** Value: "androidSdk5" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_AndroidSdk5;
/** Value: "ios" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_Ios;
/** Value: "iosSdk5" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_IosSdk5;
/** Value: "web" */
GTLR_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_Web;

// ----------------------------------------------------------------------------
// GTLRTagManager_ContainerAccess.permission

/** Value: "delete" */
GTLR_EXTERN NSString * const kGTLRTagManager_ContainerAccess_Permission_Delete;
/** Value: "edit" */
GTLR_EXTERN NSString * const kGTLRTagManager_ContainerAccess_Permission_Edit;
/** Value: "manage" */
GTLR_EXTERN NSString * const kGTLRTagManager_ContainerAccess_Permission_Manage;
/** Value: "publish" */
GTLR_EXTERN NSString * const kGTLRTagManager_ContainerAccess_Permission_Publish;
/** Value: "read" */
GTLR_EXTERN NSString * const kGTLRTagManager_ContainerAccess_Permission_Read;

// ----------------------------------------------------------------------------
// GTLRTagManager_Environment.type

/** Value: "draft" */
GTLR_EXTERN NSString * const kGTLRTagManager_Environment_Type_Draft;
/** Value: "latest" */
GTLR_EXTERN NSString * const kGTLRTagManager_Environment_Type_Latest;
/** Value: "live" */
GTLR_EXTERN NSString * const kGTLRTagManager_Environment_Type_Live;
/** Value: "user" */
GTLR_EXTERN NSString * const kGTLRTagManager_Environment_Type_User;

// ----------------------------------------------------------------------------
// GTLRTagManager_Parameter.type

/** Value: "boolean" */
GTLR_EXTERN NSString * const kGTLRTagManager_Parameter_Type_Boolean;
/** Value: "integer" */
GTLR_EXTERN NSString * const kGTLRTagManager_Parameter_Type_Integer;
/** Value: "list" */
GTLR_EXTERN NSString * const kGTLRTagManager_Parameter_Type_List;
/** Value: "map" */
GTLR_EXTERN NSString * const kGTLRTagManager_Parameter_Type_Map;
/** Value: "template" */
GTLR_EXTERN NSString * const kGTLRTagManager_Parameter_Type_Template;

// ----------------------------------------------------------------------------
// GTLRTagManager_Tag.tagFiringOption

/** Value: "oncePerEvent" */
GTLR_EXTERN NSString * const kGTLRTagManager_Tag_TagFiringOption_OncePerEvent;
/** Value: "oncePerLoad" */
GTLR_EXTERN NSString * const kGTLRTagManager_Tag_TagFiringOption_OncePerLoad;
/** Value: "unlimited" */
GTLR_EXTERN NSString * const kGTLRTagManager_Tag_TagFiringOption_Unlimited;

// ----------------------------------------------------------------------------
// GTLRTagManager_Trigger.type

/** Value: "ajaxSubmission" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_AjaxSubmission;
/** Value: "always" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_Always;
/** Value: "click" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_Click;
/** Value: "customEvent" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_CustomEvent;
/** Value: "domReady" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_DomReady;
/** Value: "formSubmission" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FormSubmission;
/** Value: "historyChange" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_HistoryChange;
/** Value: "jsError" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_JsError;
/** Value: "linkClick" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_LinkClick;
/** Value: "pageview" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_Pageview;
/** Value: "timer" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_Timer;
/** Value: "windowLoaded" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_WindowLoaded;
/** Value: "youTube" */
GTLR_EXTERN NSString * const kGTLRTagManager_Trigger_Type_YouTube;

/**
 *  Represents a Google Tag Manager Account.
 */
@interface GTLRTagManager_Account : GTLRObject

/** The Account ID uniquely identifies the GTM Account. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The fingerprint of the GTM Account as computed at storage time. This value
 *  is recomputed whenever the account is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** Account display name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Whether the account shares data anonymously with Google and others.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shareData;

@end


/**
 *  Defines the Google Tag Manager Account access permissions.
 */
@interface GTLRTagManager_AccountAccess : GTLRObject

/**
 *  List of Account permissions. Valid account permissions are read and manage.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permission;

@end


/**
 *  Represents a predicate.
 */
@interface GTLRTagManager_Condition : GTLRObject

/**
 *  A list of named parameters (key/value), depending on the condition's type.
 *  Notes:
 *  - For binary operators, include parameters named arg0 and arg1 for
 *  specifying the left and right operands, respectively.
 *  - At this time, the left operand (arg0) must be a reference to a variable.
 *  - For case-insensitive Regex matching, include a boolean parameter named
 *  ignore_case that is set to true. If not specified or set to any other value,
 *  the matching will be case sensitive.
 *  - To negate an operator, include a boolean parameter named negate boolean
 *  parameter that is set to true.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *parameter;

/**
 *  The type of operator for this condition.
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_Condition_Type_Contains Value "contains"
 *    @arg @c kGTLRTagManager_Condition_Type_CssSelector Value "cssSelector"
 *    @arg @c kGTLRTagManager_Condition_Type_EndsWith Value "endsWith"
 *    @arg @c kGTLRTagManager_Condition_Type_Equals Value "equals"
 *    @arg @c kGTLRTagManager_Condition_Type_Greater Value "greater"
 *    @arg @c kGTLRTagManager_Condition_Type_GreaterOrEquals Value
 *        "greaterOrEquals"
 *    @arg @c kGTLRTagManager_Condition_Type_Less Value "less"
 *    @arg @c kGTLRTagManager_Condition_Type_LessOrEquals Value "lessOrEquals"
 *    @arg @c kGTLRTagManager_Condition_Type_MatchRegex Value "matchRegex"
 *    @arg @c kGTLRTagManager_Condition_Type_StartsWith Value "startsWith"
 *    @arg @c kGTLRTagManager_Condition_Type_UrlMatches Value "urlMatches"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a Google Tag Manager Container.
 */
@interface GTLRTagManager_Container : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The Container ID uniquely identifies the GTM Container. */
@property(nonatomic, copy, nullable) NSString *containerId;

/** Optional list of domain names associated with the Container. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *domainName;

/**
 *  List of enabled built-in variables. Valid values include: pageUrl,
 *  pageHostname, pagePath, referrer, event, clickElement, clickClasses,
 *  clickId, clickTarget, clickUrl, clickText, formElement, formClasses, formId,
 *  formTarget, formUrl, formText, errorMessage, errorUrl, errorLine,
 *  newHistoryFragment, oldHistoryFragment, newHistoryState, oldHistoryState,
 *  historySource, containerVersion, debugMode, randomNumber, containerId.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *enabledBuiltInVariable;

/**
 *  The fingerprint of the GTM Container as computed at storage time. This value
 *  is recomputed whenever the account is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** Container display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Container Notes. */
@property(nonatomic, copy, nullable) NSString *notes;

/** Container Public ID. */
@property(nonatomic, copy, nullable) NSString *publicId;

/** Container Country ID. */
@property(nonatomic, copy, nullable) NSString *timeZoneCountryId;

/** Container Time Zone ID. */
@property(nonatomic, copy, nullable) NSString *timeZoneId;

/**
 *  List of Usage Contexts for the Container. Valid values include: web,
 *  android, ios.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *usageContext;

@end


/**
 *  Defines the Google Tag Manager Container access permissions.
 */
@interface GTLRTagManager_ContainerAccess : GTLRObject

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  List of Container permissions. Valid container permissions are: read, edit,
 *  delete, publish.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permission;

@end


/**
 *  Represents a Google Tag Manager Container Version.
 */
@interface GTLRTagManager_ContainerVersion : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The container that this version was taken from. */
@property(nonatomic, strong, nullable) GTLRTagManager_Container *container;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/** The Container Version ID uniquely identifies the GTM Container Version. */
@property(nonatomic, copy, nullable) NSString *containerVersionId;

/**
 *  A value of true indicates this container version has been deleted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/**
 *  The fingerprint of the GTM Container Version as computed at storage time.
 *  This value is recomputed whenever the container version is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** The folders in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Folder *> *folder;

/** The macros in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Macro *> *macro;

/** Container version display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** User notes on how to apply this container version in the container. */
@property(nonatomic, copy, nullable) NSString *notes;

/** The rules in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Rule *> *rule;

/** The tags in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Tag *> *tag;

/** The triggers in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Trigger *> *trigger;

/** The variables in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Variable *> *variable;

@end


/**
 *  Represents a Google Tag Manager Container Version Header.
 */
@interface GTLRTagManager_ContainerVersionHeader : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/** The Container Version ID uniquely identifies the GTM Container Version. */
@property(nonatomic, copy, nullable) NSString *containerVersionId;

/**
 *  A value of true indicates this container version has been deleted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/** Container version display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Number of macros in the container version. */
@property(nonatomic, copy, nullable) NSString *numMacros;

/** Number of rules in the container version. */
@property(nonatomic, copy, nullable) NSString *numRules;

/** Number of tags in the container version. */
@property(nonatomic, copy, nullable) NSString *numTags;

/** Number of triggers in the container version. */
@property(nonatomic, copy, nullable) NSString *numTriggers;

/** Number of variables in the container version. */
@property(nonatomic, copy, nullable) NSString *numVariables;

@end


/**
 *  Options for new container versions.
 */
@interface GTLRTagManager_CreateContainerVersionRequestVersionOptions : GTLRObject

/** The name of the container version to be created. */
@property(nonatomic, copy, nullable) NSString *name;

/** The notes of the container version to be created. */
@property(nonatomic, copy, nullable) NSString *notes;

/**
 *  The creation of this version may be for quick preview and shouldn't be
 *  saved.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *quickPreview;

@end


/**
 *  Create container versions response.
 */
@interface GTLRTagManager_CreateContainerVersionResponse : GTLRObject

/**
 *  Compiler errors or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *compilerError;

/** The container version created. */
@property(nonatomic, strong, nullable) GTLRTagManager_ContainerVersion *containerVersion;

@end


/**
 *  Represents a Google Tag Manager Environment. Note that a user can create,
 *  delete and update environments of type USER, but can only update the
 *  enable_debug and url fields of environments of other types.
 */
@interface GTLRTagManager_Environment : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The environment authorization code. */
@property(nonatomic, copy, nullable) NSString *authorizationCode;

/**
 *  The last update time-stamp for the authorization code.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *authorizationTimestampMs;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

@property(nonatomic, copy, nullable) NSString *containerVersionId;

/**
 *  The environment description. Can be set or changed only on USER type
 *  environments.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Whether or not to enable debug by default on for the environment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableDebug;

/** GTM Environment ID uniquely identifies the GTM Environment. */
@property(nonatomic, copy, nullable) NSString *environmentId;

/**
 *  The fingerprint of the GTM environment as computed at storage time. This
 *  value is recomputed whenever the environment is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/**
 *  The environment display name. Can be set or changed only on USER type
 *  environments.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The type of this environment.
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_Environment_Type_Draft Value "draft"
 *    @arg @c kGTLRTagManager_Environment_Type_Latest Value "latest"
 *    @arg @c kGTLRTagManager_Environment_Type_Live Value "live"
 *    @arg @c kGTLRTagManager_Environment_Type_User Value "user"
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Default preview page url for the environment. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Represents a Google Tag Manager Folder.
 */
@interface GTLRTagManager_Folder : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  The fingerprint of the GTM Folder as computed at storage time. This value is
 *  recomputed whenever the folder is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** The Folder ID uniquely identifies the GTM Folder. */
@property(nonatomic, copy, nullable) NSString *folderId;

/** Folder display name. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Represents a Google Tag Manager Folder's contents.
 */
@interface GTLRTagManager_FolderEntities : GTLRObject

/** The list of tags inside the folder. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Tag *> *tag;

/** The list of triggers inside the folder. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Trigger *> *trigger;

/** The list of variables inside the folder. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Variable *> *variable;

@end


/**
 *  List Accounts Response.
 */
@interface GTLRTagManager_ListAccountsResponse : GTLRObject

/** List of GTM Accounts that a user has access to. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Account *> *accounts;

@end


/**
 *  List AccountUsers Response.
 */
@interface GTLRTagManager_ListAccountUsersResponse : GTLRObject

/** All GTM AccountUsers of a GTM Account. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_UserAccess *> *userAccess;

@end


/**
 *  List Containers Response.
 */
@interface GTLRTagManager_ListContainersResponse : GTLRObject

/** All Containers of a GTM Account. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Container *> *containers;

@end


/**
 *  List container versions response.
 */
@interface GTLRTagManager_ListContainerVersionsResponse : GTLRObject

/** All versions of a GTM Container. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_ContainerVersion *> *containerVersion;

/** All container version headers of a GTM Container. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_ContainerVersionHeader *> *containerVersionHeader;

@end


/**
 *  List Environments Response.
 */
@interface GTLRTagManager_ListEnvironmentsResponse : GTLRObject

/** All Environments of a GTM Container. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Environment *> *environments;

@end


/**
 *  List Folders Response.
 */
@interface GTLRTagManager_ListFoldersResponse : GTLRObject

/** All GTM Folders of a GTM Container. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Folder *> *folders;

@end


/**
 *  List Tags Response.
 */
@interface GTLRTagManager_ListTagsResponse : GTLRObject

/** All GTM Tags of a GTM Container. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Tag *> *tags;

@end


/**
 *  List triggers response.
 */
@interface GTLRTagManager_ListTriggersResponse : GTLRObject

/** All GTM Triggers of a GTM Container. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Trigger *> *triggers;

@end


/**
 *  List Variables Response.
 */
@interface GTLRTagManager_ListVariablesResponse : GTLRObject

/** All GTM Variables of a GTM Container. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Variable *> *variables;

@end


/**
 *  Represents a Google Tag Manager Macro.
 */
@interface GTLRTagManager_Macro : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  For mobile containers only: A list of rule IDs for disabling conditional
 *  macros; the macro is enabled if one of the enabling rules is true while all
 *  the disabling rules are false. Treated as an unordered set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *disablingRuleId;

/**
 *  For mobile containers only: A list of rule IDs for enabling conditional
 *  macros; the macro is enabled if one of the enabling rules is true while all
 *  the disabling rules are false. Treated as an unordered set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *enablingRuleId;

/**
 *  The fingerprint of the GTM Macro as computed at storage time. This value is
 *  recomputed whenever the macro is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** The Macro ID uniquely identifies the GTM Macro. */
@property(nonatomic, copy, nullable) NSString *macroId;

/** Macro display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** User notes on how to apply this macro in the container. */
@property(nonatomic, copy, nullable) NSString *notes;

/** The macro's parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *parameter;

/** Parent folder id. */
@property(nonatomic, copy, nullable) NSString *parentFolderId;

/**
 *  The end timestamp in milliseconds to schedule a macro.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scheduleEndMs;

/**
 *  The start timestamp in milliseconds to schedule a macro.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scheduleStartMs;

/** GTM Macro Type. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a Google Tag Manager Parameter.
 */
@interface GTLRTagManager_Parameter : GTLRObject

/**
 *  The named key that uniquely identifies a parameter. Required for top-level
 *  parameters, as well as map values. Ignored for list values.
 */
@property(nonatomic, copy, nullable) NSString *key;

/** This list parameter's parameters (keys will be ignored). */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *list;

/** This map parameter's parameters (must have keys; keys must be unique). */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *map;

/**
 *  The parameter type. Valid values are:
 *  - boolean: The value represents a boolean, represented as 'true' or 'false'
 *  - integer: The value represents a 64-bit signed integer value, in base 10
 *  - list: A list of parameters should be specified
 *  - map: A map of parameters should be specified
 *  - template: The value represents any text; this can include variable
 *  references (even variable references that might return non-string types)
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_Parameter_Type_Boolean Value "boolean"
 *    @arg @c kGTLRTagManager_Parameter_Type_Integer Value "integer"
 *    @arg @c kGTLRTagManager_Parameter_Type_List Value "list"
 *    @arg @c kGTLRTagManager_Parameter_Type_Map Value "map"
 *    @arg @c kGTLRTagManager_Parameter_Type_Template Value "template"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  A parameter's value (may contain variable references such as
 *  "{{myVariable}}") as appropriate to the specified type.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Publish container version response.
 */
@interface GTLRTagManager_PublishContainerVersionResponse : GTLRObject

/**
 *  Compiler errors or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *compilerError;

/** The container version created. */
@property(nonatomic, strong, nullable) GTLRTagManager_ContainerVersion *containerVersion;

@end


/**
 *  Represents a Google Tag Manager Rule.
 */
@interface GTLRTagManager_Rule : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The list of conditions that make up this rule (implicit AND between them).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Condition *> *condition;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  The fingerprint of the GTM Rule as computed at storage time. This value is
 *  recomputed whenever the rule is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** Rule display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** User notes on how to apply this rule in the container. */
@property(nonatomic, copy, nullable) NSString *notes;

/** The Rule ID uniquely identifies the GTM Rule. */
@property(nonatomic, copy, nullable) NSString *ruleId;

@end


/**
 *  GTLRTagManager_SetupTag
 */
@interface GTLRTagManager_SetupTag : GTLRObject

/**
 *  If true, fire the main tag if and only if the setup tag fires successfully.
 *  If false, fire the main tag regardless of setup tag firing status.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stopOnSetupFailure;

/** The name of the setup tag. */
@property(nonatomic, copy, nullable) NSString *tagName;

@end


/**
 *  Represents a Google Tag Manager Tag.
 */
@interface GTLRTagManager_Tag : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Blocking rule IDs. If any of the listed rules evaluate to true, the tag will
 *  not fire.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *blockingRuleId;

/**
 *  Blocking trigger IDs. If any of the listed triggers evaluate to true, the
 *  tag will not fire.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *blockingTriggerId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  The fingerprint of the GTM Tag as computed at storage time. This value is
 *  recomputed whenever the tag is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/**
 *  Firing rule IDs. A tag will fire when any of the listed rules are true and
 *  all of its blockingRuleIds (if any specified) are false.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *firingRuleId;

/**
 *  Firing trigger IDs. A tag will fire when any of the listed triggers are true
 *  and all of its blockingTriggerIds (if any specified) are false.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *firingTriggerId;

/**
 *  If set to true, this tag will only fire in the live environment (e.g. not in
 *  preview or debug mode).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *liveOnly;

/** Tag display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** User notes on how to apply this tag in the container. */
@property(nonatomic, copy, nullable) NSString *notes;

/** The tag's parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *parameter;

/** Parent folder id. */
@property(nonatomic, copy, nullable) NSString *parentFolderId;

/**
 *  User defined numeric priority of the tag. Tags are fired asynchronously in
 *  order of priority. Tags with higher numeric value fire first. A tag's
 *  priority can be a positive or negative value. The default value is 0.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *priority;

/**
 *  The end timestamp in milliseconds to schedule a tag.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scheduleEndMs;

/**
 *  The start timestamp in milliseconds to schedule a tag.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scheduleStartMs;

/** The list of setup tags. Currently we only allow one. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_SetupTag *> *setupTag;

/**
 *  Option to fire this tag.
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_Tag_TagFiringOption_OncePerEvent Value
 *        "oncePerEvent"
 *    @arg @c kGTLRTagManager_Tag_TagFiringOption_OncePerLoad Value
 *        "oncePerLoad"
 *    @arg @c kGTLRTagManager_Tag_TagFiringOption_Unlimited Value "unlimited"
 */
@property(nonatomic, copy, nullable) NSString *tagFiringOption;

/** The Tag ID uniquely identifies the GTM Tag. */
@property(nonatomic, copy, nullable) NSString *tagId;

/** The list of teardown tags. Currently we only allow one. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_TeardownTag *> *teardownTag;

/** GTM Tag Type. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRTagManager_TeardownTag
 */
@interface GTLRTagManager_TeardownTag : GTLRObject

/**
 *  If true, fire the teardown tag if and only if the main tag fires
 *  successfully. If false, fire the teardown tag regardless of main tag firing
 *  status.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stopTeardownOnFailure;

/** The name of the teardown tag. */
@property(nonatomic, copy, nullable) NSString *tagName;

@end


/**
 *  Represents a Google Tag Manager Trigger
 */
@interface GTLRTagManager_Trigger : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Used in the case of auto event tracking. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Condition *> *autoEventFilter;

/**
 *  Whether or not we should only fire tags if the form submit or link click
 *  event is not cancelled by some other event handler (e.g. because of
 *  validation). Only valid for Form Submission and Link Click triggers.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *checkValidation;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  Used in the case of custom event, which is fired iff all Conditions are
 *  true.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Condition *> *customEventFilter;

/**
 *  Reloads the videos in the page that don't already have the YT API enabled.
 *  If false, only capture events from videos that already have the API enabled.
 *  Only valid for YouTube triggers.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *enableAllVideos;

/** Name of the GTM event that is fired. Only valid for Timer triggers. */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *eventName;

/** The trigger will only fire iff all Conditions are true. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Condition *> *filter;

/**
 *  The fingerprint of the GTM Trigger as computed at storage time. This value
 *  is recomputed whenever the trigger is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/**
 *  Time between triggering recurring Timer Events (in milliseconds). Only valid
 *  for Timer triggers.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *interval;

/**
 *  Limit of the number of GTM events this Timer Trigger will fire. If no limit
 *  is set, we will continue to fire GTM events until the user leaves the page.
 *  Only valid for Timer triggers.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *limit;

/** Trigger display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Parent folder id. */
@property(nonatomic, copy, nullable) NSString *parentFolderId;

/** The Trigger ID uniquely identifies the GTM Trigger. */
@property(nonatomic, copy, nullable) NSString *triggerId;

/**
 *  Defines the data layer event that causes this trigger.
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_Trigger_Type_AjaxSubmission Value "ajaxSubmission"
 *    @arg @c kGTLRTagManager_Trigger_Type_Always Value "always"
 *    @arg @c kGTLRTagManager_Trigger_Type_Click Value "click"
 *    @arg @c kGTLRTagManager_Trigger_Type_CustomEvent Value "customEvent"
 *    @arg @c kGTLRTagManager_Trigger_Type_DomReady Value "domReady"
 *    @arg @c kGTLRTagManager_Trigger_Type_FormSubmission Value "formSubmission"
 *    @arg @c kGTLRTagManager_Trigger_Type_HistoryChange Value "historyChange"
 *    @arg @c kGTLRTagManager_Trigger_Type_JsError Value "jsError"
 *    @arg @c kGTLRTagManager_Trigger_Type_LinkClick Value "linkClick"
 *    @arg @c kGTLRTagManager_Trigger_Type_Pageview Value "pageview"
 *    @arg @c kGTLRTagManager_Trigger_Type_Timer Value "timer"
 *    @arg @c kGTLRTagManager_Trigger_Type_WindowLoaded Value "windowLoaded"
 *    @arg @c kGTLRTagManager_Trigger_Type_YouTube Value "youTube"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Globally unique id of the trigger that auto-generates this (a Form Submit,
 *  Link Click or Timer listener) if any. Used to make incompatible auto-events
 *  work together with trigger filtering based on trigger ids. This value is
 *  populated during output generation since the tags implied by triggers don't
 *  exist until then. Only valid for Form Submit, Link Click and Timer triggers.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *uniqueTriggerId;

/**
 *  List of integer percentage values. The trigger will fire as each percentage
 *  is reached in any instrumented videos. Only valid for YouTube triggers.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *videoPercentageList;

/**
 *  Whether or not we should delay the form submissions or link opening until
 *  all of the tags have fired (by preventing the default action and later
 *  simulating the default action). Only valid for Form Submission and Link
 *  Click triggers.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *waitForTags;

/**
 *  How long to wait (in milliseconds) for tags to fire when 'waits_for_tags'
 *  above evaluates to true. Only valid for Form Submission and Link Click
 *  triggers.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *waitForTagsTimeout;

@end


/**
 *  Represents a user's permissions to an account and its container.
 */
@interface GTLRTagManager_UserAccess : GTLRObject

/** GTM Account access permissions. */
@property(nonatomic, strong, nullable) GTLRTagManager_AccountAccess *accountAccess;

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container access permissions. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_ContainerAccess *> *containerAccess;

/** User's email address. */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/** Account Permission ID. */
@property(nonatomic, copy, nullable) NSString *permissionId;

@end


/**
 *  Represents a Google Tag Manager Variable.
 */
@interface GTLRTagManager_Variable : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  For mobile containers only: A list of trigger IDs for disabling conditional
 *  variables; the variable is enabled if one of the enabling trigger is true
 *  while all the disabling trigger are false. Treated as an unordered set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *disablingTriggerId;

/**
 *  For mobile containers only: A list of trigger IDs for enabling conditional
 *  variables; the variable is enabled if one of the enabling triggers is true
 *  while all the disabling triggers are false. Treated as an unordered set.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *enablingTriggerId;

/**
 *  The fingerprint of the GTM Variable as computed at storage time. This value
 *  is recomputed whenever the variable is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** Variable display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** User notes on how to apply this variable in the container. */
@property(nonatomic, copy, nullable) NSString *notes;

/** The variable's parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *parameter;

/** Parent folder id. */
@property(nonatomic, copy, nullable) NSString *parentFolderId;

/**
 *  The end timestamp in milliseconds to schedule a variable.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scheduleEndMs;

/**
 *  The start timestamp in milliseconds to schedule a variable.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scheduleStartMs;

/** GTM Variable Type. */
@property(nonatomic, copy, nullable) NSString *type;

/** The Variable ID uniquely identifies the GTM Variable. */
@property(nonatomic, copy, nullable) NSString *variableId;

@end

NS_ASSUME_NONNULL_END
