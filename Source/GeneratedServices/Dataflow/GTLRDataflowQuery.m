// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Dataflow API (dataflow/v1b3)
// Description:
//   Develops and executes data processing patterns like ETL, batch computation,
//   and continuous computation.
// Documentation:
//   https://cloud.google.com/dataflow

#import "GTLRDataflowQuery.h"

#import "GTLRDataflowObjects.h"

// ----------------------------------------------------------------------------
// Constants

// filter
NSString * const kGTLRDataflowFilterActive     = @"ACTIVE";
NSString * const kGTLRDataflowFilterAll        = @"ALL";
NSString * const kGTLRDataflowFilterTerminated = @"TERMINATED";
NSString * const kGTLRDataflowFilterUnknown    = @"UNKNOWN";

// minimumImportance
NSString * const kGTLRDataflowMinimumImportanceJobMessageBasic = @"JOB_MESSAGE_BASIC";
NSString * const kGTLRDataflowMinimumImportanceJobMessageDebug = @"JOB_MESSAGE_DEBUG";
NSString * const kGTLRDataflowMinimumImportanceJobMessageDetailed = @"JOB_MESSAGE_DETAILED";
NSString * const kGTLRDataflowMinimumImportanceJobMessageError = @"JOB_MESSAGE_ERROR";
NSString * const kGTLRDataflowMinimumImportanceJobMessageImportanceUnknown = @"JOB_MESSAGE_IMPORTANCE_UNKNOWN";
NSString * const kGTLRDataflowMinimumImportanceJobMessageWarning = @"JOB_MESSAGE_WARNING";

// view
NSString * const kGTLRDataflowViewJobViewAll     = @"JOB_VIEW_ALL";
NSString * const kGTLRDataflowViewJobViewSummary = @"JOB_VIEW_SUMMARY";
NSString * const kGTLRDataflowViewJobViewUnknown = @"JOB_VIEW_UNKNOWN";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRDataflowQuery

@dynamic fields;

@end

@implementation GTLRDataflowQuery_ProjectsJobsCreate

@dynamic projectId, replaceJobId, view;

+ (instancetype)queryWithObject:(GTLRDataflow_Job *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs";
  GTLRDataflowQuery_ProjectsJobsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.jobs.create";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsDebugGetConfig

@dynamic jobId, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_GetDebugConfigRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig";
  GTLRDataflowQuery_ProjectsJobsDebugGetConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_GetDebugConfigResponse class];
  query.loggingName = @"dataflow.projects.jobs.debug.getConfig";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsDebugSendCapture

@dynamic jobId, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_SendDebugCaptureRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture";
  GTLRDataflowQuery_ProjectsJobsDebugSendCapture *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_SendDebugCaptureResponse class];
  query.loggingName = @"dataflow.projects.jobs.debug.sendCapture";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsGet

@dynamic jobId, projectId, view;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}";
  GTLRDataflowQuery_ProjectsJobsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.jobs.get";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsGetMetrics

@dynamic jobId, projectId, startTime;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/metrics";
  GTLRDataflowQuery_ProjectsJobsGetMetrics *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_JobMetrics class];
  query.loggingName = @"dataflow.projects.jobs.getMetrics";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsList

@dynamic filter, pageSize, pageToken, projectId, view;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs";
  GTLRDataflowQuery_ProjectsJobsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_ListJobsResponse class];
  query.loggingName = @"dataflow.projects.jobs.list";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsMessagesList

@dynamic endTime, jobId, minimumImportance, pageSize, pageToken, projectId,
         startTime;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/messages";
  GTLRDataflowQuery_ProjectsJobsMessagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_ListJobMessagesResponse class];
  query.loggingName = @"dataflow.projects.jobs.messages.list";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsUpdate

@dynamic jobId, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_Job *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}";
  GTLRDataflowQuery_ProjectsJobsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.jobs.update";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsWorkItemsLease

@dynamic jobId, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_LeaseWorkItemRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease";
  GTLRDataflowQuery_ProjectsJobsWorkItemsLease *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_LeaseWorkItemResponse class];
  query.loggingName = @"dataflow.projects.jobs.workItems.lease";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsWorkItemsReportStatus

@dynamic jobId, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_ReportWorkItemStatusRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus";
  GTLRDataflowQuery_ProjectsJobsWorkItemsReportStatus *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_ReportWorkItemStatusResponse class];
  query.loggingName = @"dataflow.projects.jobs.workItems.reportStatus";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsTemplatesCreate

@dynamic projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_CreateJobFromTemplateRequest *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/templates";
  GTLRDataflowQuery_ProjectsTemplatesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.templates.create";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsWorkerMessages

@dynamic projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_SendWorkerMessagesRequest *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/WorkerMessages";
  GTLRDataflowQuery_ProjectsWorkerMessages *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_SendWorkerMessagesResponse class];
  query.loggingName = @"dataflow.projects.workerMessages";
  return query;
}

@end
