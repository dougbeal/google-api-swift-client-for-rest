// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Storage Transfer API (storagetransfer/v1)
// Description:
//   Transfers data from external data sources to a Google Cloud Storage bucket
//   or between Google Cloud Storage buckets.
// Documentation:
//   https://cloud.google.com/storage/transfer

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRObject.h"
#else
  #import "GTLRObject.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRStorageTransfer_AwsAccessKey;
@class GTLRStorageTransfer_AwsS3Data;
@class GTLRStorageTransfer_Date;
@class GTLRStorageTransfer_ErrorLogEntry;
@class GTLRStorageTransfer_ErrorSummary;
@class GTLRStorageTransfer_GcsData;
@class GTLRStorageTransfer_HttpData;
@class GTLRStorageTransfer_ObjectConditions;
@class GTLRStorageTransfer_Operation;
@class GTLRStorageTransfer_OperationMetadata;
@class GTLRStorageTransfer_OperationResponse;
@class GTLRStorageTransfer_Schedule;
@class GTLRStorageTransfer_Status;
@class GTLRStorageTransfer_StatusDetailsItem;
@class GTLRStorageTransfer_TimeOfDay;
@class GTLRStorageTransfer_TransferCounters;
@class GTLRStorageTransfer_TransferJob;
@class GTLRStorageTransfer_TransferOptions;
@class GTLRStorageTransfer_TransferSpec;

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_ErrorSummary.errorCode

/** Value: "ABORTED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Aborted;
/** Value: "ALREADY_EXISTS" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_AlreadyExists;
/** Value: "CANCELLED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Cancelled;
/** Value: "DATA_LOSS" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_DataLoss;
/** Value: "DEADLINE_EXCEEDED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_DeadlineExceeded;
/** Value: "FAILED_PRECONDITION" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_FailedPrecondition;
/** Value: "INTERNAL" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Internal;
/** Value: "INVALID_ARGUMENT" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_InvalidArgument;
/** Value: "NOT_FOUND" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_NotFound;
/** Value: "OK" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Ok;
/** Value: "OUT_OF_RANGE" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_OutOfRange;
/** Value: "PERMISSION_DENIED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_PermissionDenied;
/** Value: "RESOURCE_EXHAUSTED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_ResourceExhausted;
/** Value: "UNAUTHENTICATED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unauthenticated;
/** Value: "UNAVAILABLE" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unavailable;
/** Value: "UNIMPLEMENTED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unimplemented;
/** Value: "UNKNOWN" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unknown;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_TransferJob.status

/** Value: "DELETED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_TransferJob_Status_Deleted;
/** Value: "DISABLED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_TransferJob_Status_Disabled;
/** Value: "ENABLED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_TransferJob_Status_Enabled;
/** Value: "STATUS_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_TransferJob_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_TransferOperation.status

/** Value: "ABORTED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_Aborted;
/** Value: "FAILED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_Failed;
/** Value: "IN_PROGRESS" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_InProgress;
/** Value: "PAUSED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_Paused;
/** Value: "STATUS_UNSPECIFIED" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_StatusUnspecified;
/** Value: "SUCCESS" */
GTLR_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_Success;

/**
 *  AWS access key (see [AWS Security
 *  Credentials](http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html)).
 */
@interface GTLRStorageTransfer_AwsAccessKey : GTLRObject

/** AWS access key ID. Required. */
@property(nonatomic, copy, nullable) NSString *accessKeyId;

/**
 *  AWS secret access key. This field is not returned in RPC responses.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *secretAccessKey;

@end


/**
 *  An AwsS3Data can be a data source, but not a data sink. In an AwsS3Data, an
 *  object's name is the S3 object's key name.
 */
@interface GTLRStorageTransfer_AwsS3Data : GTLRObject

/**
 *  AWS access key used to sign the API requests to the AWS S3 bucket.
 *  Permissions on the bucket must be granted to the access ID of the AWS access
 *  key. Required.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_AwsAccessKey *awsAccessKey;

/**
 *  S3 Bucket name (see [Creating a
 *  bucket](http://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *bucketName;

@end


/**
 *  Represents a whole calendar date, e.g. date of birth. The time of day and
 *  time zone are either specified elsewhere or are not significant. The date is
 *  relative to the Proleptic Gregorian Calendar. The day may be 0 to represent
 *  a year and month where the day is not significant, e.g. credit card
 *  expiration date. The year may be 0 to represent a month and day independent
 *  of year, e.g. anniversary date. Related types are
 *  [google.type.TimeOfDay][google.type.TimeOfDay] and
 *  `google.protobuf.Timestamp`.
 */
@interface GTLRStorageTransfer_Date : GTLRObject

/**
 *  Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if
 *  specifying a year/month where the day is not sigificant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of year of date. Must be from 1 to 12.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of date. Must be from 1 to 9,999, or 0 if specifying a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } The JSON
 *  representation for `Empty` is empty JSON object `{}`.
 */
@interface GTLRStorageTransfer_Empty : GTLRObject
@end


/**
 *  An entry describing an error that has occurred.
 */
@interface GTLRStorageTransfer_ErrorLogEntry : GTLRObject

/** A list of messages that carry the error details. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *errorDetails;

/**
 *  A URL that refers to the target (a data source, a data sink, or an object)
 *  with which the error is associated. Required.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A summary of errors by error code, plus a count and sample error log
 *  entries.
 */
@interface GTLRStorageTransfer_ErrorSummary : GTLRObject

/**
 *  Required.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Aborted Value
 *        "ABORTED"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_AlreadyExists Value
 *        "ALREADY_EXISTS"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Cancelled Value
 *        "CANCELLED"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_DataLoss Value
 *        "DATA_LOSS"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_DeadlineExceeded Value
 *        "DEADLINE_EXCEEDED"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_FailedPrecondition
 *        Value "FAILED_PRECONDITION"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Internal Value
 *        "INTERNAL"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_InvalidArgument Value
 *        "INVALID_ARGUMENT"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_NotFound Value
 *        "NOT_FOUND"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Ok Value "OK"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_OutOfRange Value
 *        "OUT_OF_RANGE"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_PermissionDenied Value
 *        "PERMISSION_DENIED"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_ResourceExhausted
 *        Value "RESOURCE_EXHAUSTED"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unauthenticated Value
 *        "UNAUTHENTICATED"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unavailable Value
 *        "UNAVAILABLE"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unimplemented Value
 *        "UNIMPLEMENTED"
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unknown Value
 *        "UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *errorCode;

/**
 *  Count of this type of error. Required.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *errorCount;

/** Error samples. */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageTransfer_ErrorLogEntry *> *errorLogEntries;

@end


/**
 *  In a GcsData, an object's name is the Google Cloud Storage object's name and
 *  its `lastModificationTime` refers to the object's updated time, which
 *  changes when the content or the metadata of the object is updated.
 */
@interface GTLRStorageTransfer_GcsData : GTLRObject

/**
 *  Google Cloud Storage bucket name (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *bucketName;

@end


/**
 *  Google service account
 */
@interface GTLRStorageTransfer_GoogleServiceAccount : GTLRObject

/** Required. */
@property(nonatomic, copy, nullable) NSString *accountEmail;

@end


/**
 *  An HttpData specifies a list of objects on the web to be transferred over
 *  HTTP. The information of the objects to be transferred is contained in a
 *  file referenced by a URL. The first line in the file must be
 *  "TsvHttpData-1.0", which specifies the format of the file. Subsequent lines
 *  specify the information of the list of objects, one object per list entry.
 *  Each entry has the following tab-delimited fields: * HTTP URL * Length * MD5
 *  - This field is a base64-encoded MD5 hash of the object An HTTP URL that
 *  points to the object to be transferred. It must be a valid URL with URL
 *  scheme HTTP or HTTPS. When an object with URL `http(s)://hostname:port/` is
 *  transferred to the data sink, the name of the object at the data sink is
 *  `/`. Length and MD5 provide the size and the base64-encoded MD5 hash of the
 *  object. If Length does not match the actual length of the object fetched,
 *  the object will not be transferred. If MD5 does not match the MD5 computed
 *  from the transferred bytes, the object transfer will fail.
 *  `lastModificationTime` is not available in HttpData objects. The objects
 *  that the URL list points to must allow public access. Storage Transfer
 *  Service obeys `robots.txt` rules and requires the HTTP server to support
 *  Range requests and to return a Content-Length header in each response.
 */
@interface GTLRStorageTransfer_HttpData : GTLRObject

/**
 *  The URL that points to the file that stores the object list entries. This
 *  file must allow public access. Currently, only URLs with HTTP and HTTPS
 *  schemes are supported. Required.
 */
@property(nonatomic, copy, nullable) NSString *listUrl;

@end


/**
 *  The response message for
 *  [Operations.ListOperations][google.longrunning.Operations.ListOperations].
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRStorageTransfer_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageTransfer_Operation *> *operations;

@end


/**
 *  Response from ListTransferJobs.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "transferJobs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRStorageTransfer_ListTransferJobsResponse : GTLRCollectionObject

/** The list next page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of transfer jobs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageTransfer_TransferJob *> *transferJobs;

@end


/**
 *  Conditions that determine which objects will be transferred.
 */
@interface GTLRStorageTransfer_ObjectConditions : GTLRObject

/**
 *  `excludePrefixes` must follow the requirements described for
 *  `includePrefixes`. The max size of `excludePrefixes` is 20.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludePrefixes;

/**
 *  If `includePrefixes` is specified, objects that satisfy the object
 *  conditions must have names that start with one of the `includePrefixes` and
 *  that do not start with any of the `excludePrefixes`. If `includePrefixes` is
 *  not specified, all objects except those that have names starting with one of
 *  the `excludePrefixes` must satisfy the object conditions. Requirements: *
 *  Each include-prefix and exclude-prefix can contain any sequence of Unicode
 *  characters, of max length 1024 bytes when UTF8-encoded, and must not contain
 *  Carriage Return or Line Feed characters. Wildcard matching and regular
 *  expression matching are not supported. * None of the include-prefix or the
 *  exclude-prefix values can be empty, if specified. * Each include-prefix must
 *  include a distinct portion of the object namespace, i.e., no include-prefix
 *  may be a prefix of another include-prefix. * Each exclude-prefix must
 *  exclude a distinct portion of the object namespace, i.e., no exclude-prefix
 *  may be a prefix of another exclude-prefix. * If `includePrefixes` is
 *  specified, then each exclude-prefix must start with the value of a path
 *  explicitly included by `includePrefixes`. The max size of `includePrefixes`
 *  is 20.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includePrefixes;

/**
 *  `maxTimeElapsedSinceLastModification` is the complement to
 *  `minTimeElapsedSinceLastModification`.
 */
@property(nonatomic, copy, nullable) NSString *maxTimeElapsedSinceLastModification;

/**
 *  If unspecified, `minTimeElapsedSinceLastModification` takes a zero value and
 *  `maxTimeElapsedSinceLastModification` takes the maximum possible value of
 *  Duration. Objects that satisfy the object conditions must either have a
 *  `lastModificationTime` greater or equal to `NOW` -
 *  `maxTimeElapsedSinceLastModification` and less than `NOW` -
 *  `minTimeElapsedSinceLastModification`, or not have a `lastModificationTime`.
 */
@property(nonatomic, copy, nullable) NSString *minTimeElapsedSinceLastModification;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRStorageTransfer_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  true, the operation is completed and the `result` is available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_Status *error;

/** Represents the transfer operation object. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_OperationMetadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping above, the `name`
 *  should have the format of `operations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_OperationResponse *response;

@end


/**
 *  Represents the transfer operation object.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStorageTransfer_OperationMetadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStorageTransfer_OperationResponse : GTLRObject
@end


/**
 *  Request passed to PauseTransferOperation.
 */
@interface GTLRStorageTransfer_PauseTransferOperationRequest : GTLRObject
@end


/**
 *  Request passed to ResumeTransferOperation.
 */
@interface GTLRStorageTransfer_ResumeTransferOperationRequest : GTLRObject
@end


/**
 *  Transfers can be scheduled to recur or to run just once.
 */
@interface GTLRStorageTransfer_Schedule : GTLRObject

/**
 *  The last day the recurring transfer will be run. If `scheduleEndDate` is the
 *  same as `scheduleStartDate`, the transfer will be executed only once.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_Date *scheduleEndDate;

/** The first day the recurring transfer is scheduled to run. Required. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_Date *scheduleStartDate;

/**
 *  The time in UTC at which the transfer will be scheduled to start in a day.
 *  Transfers may start later than this time. If not specified, transfers are
 *  scheduled to start at midnight UTC.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TimeOfDay *startTimeOfDay;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). The error model is designed to be:
 *  - Simple to use and understand for most users - Flexible enough to meet
 *  unexpected needs # Overview The `Status` message contains three pieces of
 *  data: error code, error message, and error details. The error code should be
 *  an enum value of [google.rpc.Code][google.rpc.Code], but it may accept
 *  additional error codes if needed. The error message should be a
 *  developer-facing English message that helps developers *understand* and
 *  *resolve* the error. If a localized user-facing error message is needed, put
 *  the localized message in the error details or localize it in the client. The
 *  optional error details may contain arbitrary information about the error.
 *  There is a predefined set of error detail types in the package `google.rpc`
 *  which can be used for common error conditions. # Language mapping The
 *  `Status` message is the logical representation of the error model, but it is
 *  not necessarily the actual wire format. When the `Status` message is exposed
 *  in different client libraries and different wire protocols, it can be mapped
 *  differently. For example, it will likely be mapped to some exceptions in
 *  Java, but more likely mapped to some error codes in C. # Other uses The
 *  error model and the `Status` message can be used in a variety of
 *  environments, either with or without APIs, to provide a consistent developer
 *  experience across different environments. Example uses of this error model
 *  include: - Partial errors. If a service needs to return partial errors to
 *  the client, it may embed the `Status` in the normal response to indicate the
 *  partial errors. - Workflow errors. A typical workflow has multiple steps.
 *  Each step may have a `Status` message for error reporting purpose. - Batch
 *  operations. If a client uses batch request and batch response, the `Status`
 *  message should be used directly inside batch response, one for each error
 *  sub-response. - Asynchronous operations. If an API call embeds asynchronous
 *  operation results in its response, the status of those operations should be
 *  represented directly using the `Status` message. - Logging. If some API
 *  errors are stored in logs, the message `Status` could be used directly after
 *  any stripping needed for security/privacy reasons.
 */
@interface GTLRStorageTransfer_Status : GTLRObject

/**
 *  The status code, which should be an enum value of
 *  [google.rpc.Code][google.rpc.Code].
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There will be a common set
 *  of message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageTransfer_StatusDetailsItem *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  [google.rpc.Status.details][google.rpc.Status.details] field, or localized
 *  by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRStorageTransfer_StatusDetailsItem
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStorageTransfer_StatusDetailsItem : GTLRObject
@end


/**
 *  Represents a time of day. The date and time zone are either not significant
 *  or are specified elsewhere. An API may chose to allow leap seconds. Related
 *  types are [google.type.Date][google.type.Date] and
 *  `google.protobuf.Timestamp`.
 */
@interface GTLRStorageTransfer_TimeOfDay : GTLRObject

/**
 *  Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to
 *  allow the value "24:00:00" for scenarios like business closing time.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Minutes of hour of day. Must be from 0 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

/**
 *  Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Seconds of minutes of the time. Must normally be from 0 to 59. An API may
 *  allow the value 60 if it allows leap-seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  A collection of counters that report the progress of a transfer operation.
 */
@interface GTLRStorageTransfer_TransferCounters : GTLRObject

/**
 *  Bytes that are copied to the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesCopiedToSink;

/**
 *  Bytes that are deleted from the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesDeletedFromSink;

/**
 *  Bytes that are deleted from the data source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesDeletedFromSource;

/**
 *  Bytes that failed to be deleted from the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesFailedToDeleteFromSink;

/**
 *  Bytes found in the data source that are scheduled to be transferred, which
 *  will be copied, excluded based on conditions, or skipped due to failures.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesFoundFromSource;

/**
 *  Bytes found only in the data sink that are scheduled to be deleted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesFoundOnlyFromSink;

/**
 *  Bytes in the data source that failed during the transfer.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesFromSourceFailed;

/**
 *  Bytes in the data source that are not transferred because they already exist
 *  in the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesFromSourceSkippedBySync;

/**
 *  Objects that are copied to the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsCopiedToSink;

/**
 *  Objects that are deleted from the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsDeletedFromSink;

/**
 *  Objects that are deleted from the data source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsDeletedFromSource;

/**
 *  Objects that failed to be deleted from the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsFailedToDeleteFromSink;

/**
 *  Objects found in the data source that are scheduled to be transferred, which
 *  will be copied, excluded based on conditions, or skipped due to failures.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsFoundFromSource;

/**
 *  Objects found only in the data sink that are scheduled to be deleted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsFoundOnlyFromSink;

/**
 *  Objects in the data source that failed during the transfer.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsFromSourceFailed;

/**
 *  Objects in the data source that are not transferred because they already
 *  exist in the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsFromSourceSkippedBySync;

@end


/**
 *  This resource represents the configuration of a transfer job that runs
 *  periodically.
 */
@interface GTLRStorageTransfer_TransferJob : GTLRObject

/** This field cannot be changed by user requests. */
@property(nonatomic, copy, nullable) NSString *creationTime;

/** This field cannot be changed by user requests. */
@property(nonatomic, copy, nullable) NSString *deletionTime;

/**
 *  A description provided by the user for the job. Its max length is 1024 bytes
 *  when Unicode-encoded.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** This field cannot be changed by user requests. */
@property(nonatomic, copy, nullable) NSString *lastModificationTime;

/**
 *  A globally unique name assigned by Storage Transfer Service when the job is
 *  created. This field should be left empty in requests to create a new
 *  transfer job; otherwise, the requests result in an `INVALID_ARGUMENT` error.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The ID of the Google Developers Console project that owns the job. Required.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Schedule specification. Required. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_Schedule *schedule;

/**
 *  Status of the job. This value MUST be specified for
 *  `CreateTransferJobRequests`. NOTE: The effect of the new job status takes
 *  place during a subsequent job run. For example, if you change the job status
 *  from `ENABLED` to `DISABLED`, and an operation spawned by the transfer is
 *  running, the status change would not affect the current operation.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_TransferJob_Status_Deleted Value "DELETED"
 *    @arg @c kGTLRStorageTransfer_TransferJob_Status_Disabled Value "DISABLED"
 *    @arg @c kGTLRStorageTransfer_TransferJob_Status_Enabled Value "ENABLED"
 *    @arg @c kGTLRStorageTransfer_TransferJob_Status_StatusUnspecified Value
 *        "STATUS_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *status;

/** Transfer specification. Required. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TransferSpec *transferSpec;

@end


/**
 *  A description of the execution of a transfer.
 */
@interface GTLRStorageTransfer_TransferOperation : GTLRObject

/** Information about the progress of the transfer operation. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TransferCounters *counters;

/** End time of this transfer execution. */
@property(nonatomic, copy, nullable) NSString *endTime;

/** Summarizes errors encountered with sample error log entries. */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageTransfer_ErrorSummary *> *errorBreakdowns;

/** A globally unique ID assigned by the system. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The ID of the Google Developers Console project that owns the operation.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Start time of this transfer execution. */
@property(nonatomic, copy, nullable) NSString *startTime;

/**
 *  Status of the transfer operation.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_Aborted Value
 *        "ABORTED"
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_Failed Value
 *        "FAILED"
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_InProgress Value
 *        "IN_PROGRESS"
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_Paused Value
 *        "PAUSED"
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_StatusUnspecified
 *        Value "STATUS_UNSPECIFIED"
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_Success Value
 *        "SUCCESS"
 */
@property(nonatomic, copy, nullable) NSString *status;

/** The name of the transfer job that triggers this transfer operation. */
@property(nonatomic, copy, nullable) NSString *transferJobName;

/** Transfer specification. Required. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TransferSpec *transferSpec;

@end


/**
 *  TransferOptions uses three boolean parameters to define the actions to be
 *  performed on objects in a transfer.
 */
@interface GTLRStorageTransfer_TransferOptions : GTLRObject

/**
 *  Whether objects should be deleted from the source after they are transferred
 *  to the sink.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleteObjectsFromSourceAfterTransfer;

/**
 *  Whether objects that exist only in the sink should be deleted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleteObjectsUniqueInSink;

/**
 *  Whether overwriting objects that already exist in the sink is allowed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *overwriteObjectsAlreadyExistingInSink;

@end


/**
 *  Configuration for running a transfer.
 */
@interface GTLRStorageTransfer_TransferSpec : GTLRObject

/** An AWS S3 data source. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_AwsS3Data *awsS3DataSource;

/** A Google Cloud Storage data sink. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_GcsData *gcsDataSink;

/** A Google Cloud Storage data source. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_GcsData *gcsDataSource;

/** An HTTP URL data source. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_HttpData *httpDataSource;

/**
 *  Only objects that satisfy these object conditions are included in the set of
 *  data source and data sink objects. Object conditions based on objects'
 *  `lastModificationTime` do not exclude objects in a data sink.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_ObjectConditions *objectConditions;

/**
 *  If the option `deleteObjectsUniqueInSink` is `true`, object conditions based
 *  on objects' `lastModificationTime` are ignored and do not exclude objects in
 *  a data source or a data sink.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TransferOptions *transferOptions;

@end


/**
 *  Request passed to UpdateTransferJob.
 */
@interface GTLRStorageTransfer_UpdateTransferJobRequest : GTLRObject

/**
 *  The ID of the Google Developers Console project that owns the job. Required.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** The job to update. Required. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TransferJob *transferJob;

/**
 *  The field mask of the fields in `transferJob` that are to be updated in this
 *  request. Fields in `transferJob` that can be updated are: `description`,
 *  `transferSpec`, and `status`. To update the `transferSpec` of the job, a
 *  complete transfer specification has to be provided. An incomplete
 *  specification which misses any required fields will be rejected with the
 *  error `INVALID_ARGUMENT`.
 */
@property(nonatomic, copy, nullable) NSString *updateTransferJobFieldMask;

@end

NS_ASSUME_NONNULL_END
