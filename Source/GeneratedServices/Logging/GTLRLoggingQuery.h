// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Stackdriver Logging API (logging/v2)
// Description:
//   Writes log entries and manages your Stackdriver Logging configuration.
// Documentation:
//   https://cloud.google.com/logging/docs/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRLogging_ListLogEntriesRequest;
@class GTLRLogging_LogMetric;
@class GTLRLogging_LogSink;
@class GTLRLogging_WriteLogEntriesRequest;

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Logging query classes.
 */
@interface GTLRLoggingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Deletes a log and all its log entries.
 *  The log will reappear if it receives new entries.
 *
 *  Method: logging.billingAccounts.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_BillingAccountsLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForBillingAccountsLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete. Example:
 *  `"projects/my-project/logs/syslog"`.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a log and all its log entries.
 *  The log will reappear if it receives new entries.
 *
 *  @param logName Required. The resource name of the log to delete. Example:
 *    `"projects/my-project/logs/syslog"`.
 *
 *  @returns GTLRLoggingQuery_BillingAccountsLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Lists log entries. Use this method to retrieve log entries from Cloud
 *  Logging. For ways to export log entries, see
 *  [Exporting Logs](/logging/docs/export).
 *
 *  Method: logging.entries.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_EntriesList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForEntriesListWithObject:]

/**
 *  Fetches a @c GTLRLogging_ListLogEntriesResponse.
 *
 *  Lists log entries. Use this method to retrieve log entries from Cloud
 *  Logging. For ways to export log entries, see
 *  [Exporting Logs](/logging/docs/export).
 *
 *  @param object The @c GTLRLogging_ListLogEntriesRequest to include in the
 *    query.
 *
 *  @returns GTLRLoggingQuery_EntriesList
 */
+ (instancetype)queryWithObject:(GTLRLogging_ListLogEntriesRequest *)object;

@end

/**
 *  Writes log entries to Stackdriver Logging. All log entries are
 *  written by this method.
 *
 *  Method: logging.entries.write
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_EntriesWrite : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForEntriesWriteWithObject:]

/**
 *  Fetches a @c GTLRLogging_WriteLogEntriesResponse.
 *
 *  Writes log entries to Stackdriver Logging. All log entries are
 *  written by this method.
 *
 *  @param object The @c GTLRLogging_WriteLogEntriesRequest to include in the
 *    query.
 *
 *  @returns GTLRLoggingQuery_EntriesWrite
 */
+ (instancetype)queryWithObject:(GTLRLogging_WriteLogEntriesRequest *)object;

@end

/**
 *  Lists the monitored resource descriptors used by Stackdriver Logging.
 *
 *  Method: logging.monitoredResourceDescriptors.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_MonitoredResourceDescriptorsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForMonitoredResourceDescriptorsList]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of `nextPageToken` in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. `pageToken` must be the value of
 *  `nextPageToken` from the previous response. The values of other method
 *  parameters should be identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRLogging_ListMonitoredResourceDescriptorsResponse.
 *
 *  Lists the monitored resource descriptors used by Stackdriver Logging.
 *
 *  @returns GTLRLoggingQuery_MonitoredResourceDescriptorsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Deletes a log and all its log entries.
 *  The log will reappear if it receives new entries.
 *
 *  Method: logging.organizations.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete. Example:
 *  `"projects/my-project/logs/syslog"`.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a log and all its log entries.
 *  The log will reappear if it receives new entries.
 *
 *  @param logName Required. The resource name of the log to delete. Example:
 *    `"projects/my-project/logs/syslog"`.
 *
 *  @returns GTLRLoggingQuery_OrganizationsLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Creates a sink.
 *
 *  Method: logging.organizations.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsSinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksCreateWithObject:parent:]

/**
 *  Required. The resource in which to create the sink.
 *  Example: `"projects/my-project-id"`.
 *  The new sink must be provided in the request.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param parent Required. The resource in which to create the sink.
 *    Example: `"projects/my-project-id"`.
 *    The new sink must be provided in the request.
 *
 *  @returns GTLRLoggingQuery_OrganizationsSinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a sink.
 *
 *  Method: logging.organizations.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsSinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksDeleteWithsinkName:]

/**
 *  Required. The resource name of the sink to delete, including the parent
 *  resource and the sink identifier. Example:
 *  `"projects/my-project-id/sinks/my-sink-id"`. It is an error if the sink
 *  does not exist.
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink.
 *
 *  @param sinkName Required. The resource name of the sink to delete, including
 *    the parent
 *    resource and the sink identifier. Example:
 *    `"projects/my-project-id/sinks/my-sink-id"`. It is an error if the sink
 *    does not exist.
 *
 *  @returns GTLRLoggingQuery_OrganizationsSinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.organizations.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsSinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksGetWithsinkName:]

/**
 *  Required. The resource name of the sink to return.
 *  Example: `"projects/my-project-id/sinks/my-sink-id"`.
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName Required. The resource name of the sink to return.
 *    Example: `"projects/my-project-id/sinks/my-sink-id"`.
 *
 *  @returns GTLRLoggingQuery_OrganizationsSinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.organizations.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_OrganizationsSinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of `nextPageToken` in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. `pageToken` must be the value of
 *  `nextPageToken` from the previous response. The values of other method
 *  parameters should be identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The cloud resource containing the sinks.
 *  Example: `"projects/my-logging-project"`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param parent Required. The cloud resource containing the sinks.
 *    Example: `"projects/my-logging-project"`.
 *
 *  @returns GTLRLoggingQuery_OrganizationsSinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates or creates a sink.
 *
 *  Method: logging.organizations.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_OrganizationsSinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForOrganizationsSinksUpdateWithObject:sinkName:]

/**
 *  Required. The resource name of the sink to update, including the parent
 *  resource and the sink identifier. If the sink does not exist, this method
 *  creates the sink. Example: `"projects/my-project-id/sinks/my-sink-id"`.
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates or creates a sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The resource name of the sink to update, including
 *    the parent
 *    resource and the sink identifier. If the sink does not exist, this method
 *    creates the sink. Example: `"projects/my-project-id/sinks/my-sink-id"`.
 *
 *  @returns GTLRLoggingQuery_OrganizationsSinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

/**
 *  Deletes a log and all its log entries.
 *  The log will reappear if it receives new entries.
 *
 *  Method: logging.projects.logs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsLogsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsLogsDeleteWithlogName:]

/**
 *  Required. The resource name of the log to delete. Example:
 *  `"projects/my-project/logs/syslog"`.
 */
@property(nonatomic, copy, nullable) NSString *logName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a log and all its log entries.
 *  The log will reappear if it receives new entries.
 *
 *  @param logName Required. The resource name of the log to delete. Example:
 *    `"projects/my-project/logs/syslog"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsLogsDelete
 */
+ (instancetype)queryWithLogName:(NSString *)logName;

@end

/**
 *  Creates a logs-based metric.
 *
 *  Method: logging.projects.metrics.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsCreateWithObject:parent:]

/**
 *  The resource name of the project in which to create the metric.
 *  Example: `"projects/my-project-id"`.
 *  The new metric must be provided in the request.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Creates a logs-based metric.
 *
 *  @param object The @c GTLRLogging_LogMetric to include in the query.
 *  @param parent The resource name of the project in which to create the
 *    metric.
 *    Example: `"projects/my-project-id"`.
 *    The new metric must be provided in the request.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a logs-based metric.
 *
 *  Method: logging.projects.metrics.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsDeleteWithmetricName:]

/**
 *  The resource name of the metric to delete.
 *  Example: `"projects/my-project-id/metrics/my-metric-id"`.
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a logs-based metric.
 *
 *  @param metricName The resource name of the metric to delete.
 *    Example: `"projects/my-project-id/metrics/my-metric-id"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsDelete
 */
+ (instancetype)queryWithMetricName:(NSString *)metricName;

@end

/**
 *  Gets a logs-based metric.
 *
 *  Method: logging.projects.metrics.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsMetricsGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsGetWithmetricName:]

/**
 *  The resource name of the desired metric.
 *  Example: `"projects/my-project-id/metrics/my-metric-id"`.
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Gets a logs-based metric.
 *
 *  @param metricName The resource name of the desired metric.
 *    Example: `"projects/my-project-id/metrics/my-metric-id"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsGet
 */
+ (instancetype)queryWithMetricName:(NSString *)metricName;

@end

/**
 *  Lists logs-based metrics.
 *
 *  Method: logging.projects.metrics.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsMetricsList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of `nextPageToken` in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. `pageToken` must be the value of
 *  `nextPageToken` from the previous response. The values of other method
 *  parameters should be identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name containing the metrics.
 *  Example: `"projects/my-project-id"`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListLogMetricsResponse.
 *
 *  Lists logs-based metrics.
 *
 *  @param parent Required. The resource name containing the metrics.
 *    Example: `"projects/my-project-id"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates or updates a logs-based metric.
 *
 *  Method: logging.projects.metrics.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingWrite
 */
@interface GTLRLoggingQuery_ProjectsMetricsUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsMetricsUpdateWithObject:metricName:]

/**
 *  The resource name of the metric to update.
 *  Example: `"projects/my-project-id/metrics/my-metric-id"`.
 *  The updated metric must be provided in the request and have the
 *  same identifier that is specified in `metricName`.
 *  If the metric does not exist, it is created.
 */
@property(nonatomic, copy, nullable) NSString *metricName;

/**
 *  Fetches a @c GTLRLogging_LogMetric.
 *
 *  Creates or updates a logs-based metric.
 *
 *  @param object The @c GTLRLogging_LogMetric to include in the query.
 *  @param metricName The resource name of the metric to update.
 *    Example: `"projects/my-project-id/metrics/my-metric-id"`.
 *    The updated metric must be provided in the request and have the
 *    same identifier that is specified in `metricName`.
 *    If the metric does not exist, it is created.
 *
 *  @returns GTLRLoggingQuery_ProjectsMetricsUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogMetric *)object
                     metricName:(NSString *)metricName;

@end

/**
 *  Creates a sink.
 *
 *  Method: logging.projects.sinks.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksCreate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksCreateWithObject:parent:]

/**
 *  Required. The resource in which to create the sink.
 *  Example: `"projects/my-project-id"`.
 *  The new sink must be provided in the request.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Creates a sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param parent Required. The resource in which to create the sink.
 *    Example: `"projects/my-project-id"`.
 *    The new sink must be provided in the request.
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksCreate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a sink.
 *
 *  Method: logging.projects.sinks.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksDelete : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksDeleteWithsinkName:]

/**
 *  Required. The resource name of the sink to delete, including the parent
 *  resource and the sink identifier. Example:
 *  `"projects/my-project-id/sinks/my-sink-id"`. It is an error if the sink
 *  does not exist.
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_Empty.
 *
 *  Deletes a sink.
 *
 *  @param sinkName Required. The resource name of the sink to delete, including
 *    the parent
 *    resource and the sink identifier. Example:
 *    `"projects/my-project-id/sinks/my-sink-id"`. It is an error if the sink
 *    does not exist.
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksDelete
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Gets a sink.
 *
 *  Method: logging.projects.sinks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsSinksGet : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksGetWithsinkName:]

/**
 *  Required. The resource name of the sink to return.
 *  Example: `"projects/my-project-id/sinks/my-sink-id"`.
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Gets a sink.
 *
 *  @param sinkName Required. The resource name of the sink to return.
 *    Example: `"projects/my-project-id/sinks/my-sink-id"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksGet
 */
+ (instancetype)queryWithSinkName:(NSString *)sinkName;

@end

/**
 *  Lists sinks.
 *
 *  Method: logging.projects.sinks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 *    @c kGTLRAuthScopeLoggingCloudPlatformReadOnly
 *    @c kGTLRAuthScopeLoggingRead
 */
@interface GTLRLoggingQuery_ProjectsSinksList : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksListWithparent:]

/**
 *  Optional. The maximum number of results to return from this request.
 *  Non-positive values are ignored. The presence of `nextPageToken` in the
 *  response indicates that more results might be available.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. If present, then retrieve the next batch of results from the
 *  preceding call to this method. `pageToken` must be the value of
 *  `nextPageToken` from the previous response. The values of other method
 *  parameters should be identical to those in the previous call.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The cloud resource containing the sinks.
 *  Example: `"projects/my-logging-project"`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRLogging_ListSinksResponse.
 *
 *  Lists sinks.
 *
 *  @param parent Required. The cloud resource containing the sinks.
 *    Example: `"projects/my-logging-project"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates or creates a sink.
 *
 *  Method: logging.projects.sinks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeLoggingAdmin
 *    @c kGTLRAuthScopeLoggingCloudPlatform
 */
@interface GTLRLoggingQuery_ProjectsSinksUpdate : GTLRLoggingQuery
// Previous library name was
//   +[GTLQueryLogging queryForProjectsSinksUpdateWithObject:sinkName:]

/**
 *  Required. The resource name of the sink to update, including the parent
 *  resource and the sink identifier. If the sink does not exist, this method
 *  creates the sink. Example: `"projects/my-project-id/sinks/my-sink-id"`.
 */
@property(nonatomic, copy, nullable) NSString *sinkName;

/**
 *  Fetches a @c GTLRLogging_LogSink.
 *
 *  Updates or creates a sink.
 *
 *  @param object The @c GTLRLogging_LogSink to include in the query.
 *  @param sinkName Required. The resource name of the sink to update, including
 *    the parent
 *    resource and the sink identifier. If the sink does not exist, this method
 *    creates the sink. Example: `"projects/my-project-id/sinks/my-sink-id"`.
 *
 *  @returns GTLRLoggingQuery_ProjectsSinksUpdate
 */
+ (instancetype)queryWithObject:(GTLRLogging_LogSink *)object
                       sinkName:(NSString *)sinkName;

@end

NS_ASSUME_NONNULL_END
