// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Translate API (translate/v2)
// Description:
//   Translates text from one language to another.
// Documentation:
//   https://developers.google.com/translate/v2/using_rest

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// format

/**
 *  Specifies the input is in HTML
 *
 *  Value: "html"
 */
GTLR_EXTERN NSString * const kGTLRTranslateFormatHtml;
/**
 *  Specifies the input is in plain textual format
 *
 *  Value: "text"
 */
GTLR_EXTERN NSString * const kGTLRTranslateFormatText;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Translate query classes.
 */
@interface GTLRTranslateQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Detect the language of text.
 *
 *  Method: language.detections.list
 */
@interface GTLRTranslateQuery_DetectionsList : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForDetectionsListWithq:]

/** The text to detect */
@property(nonatomic, strong, nullable) NSArray<NSString *> *q;

/**
 *  Fetches a @c GTLRTranslate_DetectionsListResponse.
 *
 *  Detect the language of text.
 *
 *  @param q The text to detect
 *
 *  @returns GTLRTranslateQuery_DetectionsList
 */
+ (instancetype)queryWithQ:(NSArray<NSString *> *)q;

@end

/**
 *  List the source/target languages supported by the API
 *
 *  Method: language.languages.list
 */
@interface GTLRTranslateQuery_LanguagesList : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForLanguagesList]

/**
 *  the language and collation in which the localized results should be returned
 */
@property(nonatomic, copy, nullable) NSString *target;

/**
 *  Fetches a @c GTLRTranslate_LanguagesListResponse.
 *
 *  List the source/target languages supported by the API
 *
 *  @returns GTLRTranslateQuery_LanguagesList
 */
+ (instancetype)query;

@end

/**
 *  Returns text translations from one language to another.
 *
 *  Method: language.translations.list
 */
@interface GTLRTranslateQuery_TranslationsList : GTLRTranslateQuery
// Previous library name was
//   +[GTLQueryTranslate queryForTranslationsListWithq:target:]

/** The customization id for translate */
@property(nonatomic, strong, nullable) NSArray<NSString *> *cid;

/**
 *  The format of the text
 *
 *  Likely values:
 *    @arg @c kGTLRTranslateFormatHtml Specifies the input is in HTML (Value:
 *        "html")
 *    @arg @c kGTLRTranslateFormatText Specifies the input is in plain textual
 *        format (Value: "text")
 */
@property(nonatomic, copy, nullable) NSString *format;

/** The text to translate */
@property(nonatomic, strong, nullable) NSArray<NSString *> *q;

/** The source language of the text */
@property(nonatomic, copy, nullable) NSString *source;

/** The target language into which the text should be translated */
@property(nonatomic, copy, nullable) NSString *target;

/**
 *  Fetches a @c GTLRTranslate_TranslationsListResponse.
 *
 *  Returns text translations from one language to another.
 *
 *  @param q The text to translate
 *  @param target The target language into which the text should be translated
 *
 *  @returns GTLRTranslateQuery_TranslationsList
 */
+ (instancetype)queryWithQ:(NSArray<NSString *> *)q
                    target:(NSString *)target;

@end

NS_ASSUME_NONNULL_END
