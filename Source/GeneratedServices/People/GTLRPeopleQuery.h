// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google People API (people/v1)
// Description:
//   The Google People API service gives access to information about profiles
//   and contacts.
// Documentation:
//   https://developers.google.com/people/

#if GTLR_BUILT_AS_FRAMEWORK
  #import "GTLR/GTLRQuery.h"
#else
  #import "GTLRQuery.h"
#endif

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// sortOrder

/** Value: "FIRST_NAME_ASCENDING" */
GTLR_EXTERN NSString * const kGTLRPeopleSortOrderFirstNameAscending;
/** Value: "LAST_MODIFIED_ASCENDING" */
GTLR_EXTERN NSString * const kGTLRPeopleSortOrderLastModifiedAscending;
/** Value: "LAST_NAME_ASCENDING" */
GTLR_EXTERN NSString * const kGTLRPeopleSortOrderLastNameAscending;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other People query classes.
 */
@interface GTLRPeopleQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Provides a list of the authenticated user's contacts merged with any linked
 *  profiles.
 *
 *  Method: people.people.connections.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleContacts
 *    @c kGTLRAuthScopePeopleContactsReadonly
 */
@interface GTLRPeopleQuery_PeopleConnectionsList : GTLRPeopleQuery
// Previous library name was
//   +[GTLQueryPeople queryForPeopleConnectionsListWithresourceName:]

/**
 *  The number of connections to include in the response. Valid values are
 *  between 1 and 500, inclusive. Defaults to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The token of the page to be returned. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Comma-separated list of fields to be included in the response. Omitting this
 *  field will include all fields. Each path should start with `person.`: for
 *  example, `person.names` or `person.photos`.
 */
@property(nonatomic, copy, nullable) NSString *requestMaskIncludeField;

/** The resource name to return connections for. Only `people/me` is valid. */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  The order in which the connections should be sorted. Defaults to
 *  `LAST_MODIFIED_ASCENDING`.
 *
 *  Likely values:
 *    @arg @c kGTLRPeopleSortOrderLastModifiedAscending Value
 *        "LAST_MODIFIED_ASCENDING"
 *    @arg @c kGTLRPeopleSortOrderFirstNameAscending Value
 *        "FIRST_NAME_ASCENDING"
 *    @arg @c kGTLRPeopleSortOrderLastNameAscending Value "LAST_NAME_ASCENDING"
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  A sync token, returned by a previous call to `people.connections.list`. Only
 *  resources changed since the sync token was created are returned.
 */
@property(nonatomic, copy, nullable) NSString *syncToken;

/**
 *  Fetches a @c GTLRPeople_ListConnectionsResponse.
 *
 *  Provides a list of the authenticated user's contacts merged with any linked
 *  profiles.
 *
 *  @param resourceName The resource name to return connections for. Only
 *    `people/me` is valid.
 *
 *  @returns GTLRPeopleQuery_PeopleConnectionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

@end

/**
 *  Provides information about a person resource for a resource name. Use
 *  `people/me` to indicate the authenticated user.
 *
 *  Method: people.people.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleContacts
 *    @c kGTLRAuthScopePeopleContactsReadonly
 *    @c kGTLRAuthScopePeoplePlusLogin
 *    @c kGTLRAuthScopePeopleUserAddressesRead
 *    @c kGTLRAuthScopePeopleUserBirthdayRead
 *    @c kGTLRAuthScopePeopleUserEmailsRead
 *    @c kGTLRAuthScopePeopleUserinfoEmail
 *    @c kGTLRAuthScopePeopleUserinfoProfile
 *    @c kGTLRAuthScopePeopleUserPhonenumbersRead
 */
@interface GTLRPeopleQuery_PeopleGet : GTLRPeopleQuery
// Previous library name was
//   +[GTLQueryPeople queryForPeopleGetWithresourceName:]

/**
 *  Comma-separated list of fields to be included in the response. Omitting this
 *  field will include all fields. Each path should start with `person.`: for
 *  example, `person.names` or `person.photos`.
 */
@property(nonatomic, copy, nullable) NSString *requestMaskIncludeField;

/**
 *  The resource name of the person to provide information about. - To get
 *  information about the authenticated user, specify `people/me`. - To get
 *  information about any user, specify the resource name that identifies the
 *  user, such as the resource names returned by
 *  [`people.connections.list`](/people/api/rest/v1/people.connections/list).
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRPeople_Person.
 *
 *  Provides information about a person resource for a resource name. Use
 *  `people/me` to indicate the authenticated user.
 *
 *  @param resourceName The resource name of the person to provide information
 *    about. - To get information about the authenticated user, specify
 *    `people/me`. - To get information about any user, specify the resource
 *    name that identifies the user, such as the resource names returned by
 *    [`people.connections.list`](/people/api/rest/v1/people.connections/list).
 *
 *  @returns GTLRPeopleQuery_PeopleGet
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

@end

/**
 *  Provides information about a list of specific people by specifying a list of
 *  requested resource names. Use `people/me` to indicate the authenticated
 *  user.
 *
 *  Method: people.people.getBatchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopePeopleContacts
 *    @c kGTLRAuthScopePeopleContactsReadonly
 *    @c kGTLRAuthScopePeoplePlusLogin
 *    @c kGTLRAuthScopePeopleUserAddressesRead
 *    @c kGTLRAuthScopePeopleUserBirthdayRead
 *    @c kGTLRAuthScopePeopleUserEmailsRead
 *    @c kGTLRAuthScopePeopleUserinfoEmail
 *    @c kGTLRAuthScopePeopleUserinfoProfile
 *    @c kGTLRAuthScopePeopleUserPhonenumbersRead
 */
@interface GTLRPeopleQuery_PeopleGetBatchGet : GTLRPeopleQuery
// Previous library name was
//   +[GTLQueryPeople queryForPeopleGetBatchGet]

/**
 *  Comma-separated list of fields to be included in the response. Omitting this
 *  field will include all fields. Each path should start with `person.`: for
 *  example, `person.names` or `person.photos`.
 */
@property(nonatomic, copy, nullable) NSString *requestMaskIncludeField;

/**
 *  The resource name, such as one returned by
 *  [`people.connections.list`](/people/api/rest/v1/people.connections/list), of
 *  one of the people to provide information about. You can include this
 *  parameter up to 50 times in one request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceNames;

/**
 *  Fetches a @c GTLRPeople_GetPeopleResponse.
 *
 *  Provides information about a list of specific people by specifying a list of
 *  requested resource names. Use `people/me` to indicate the authenticated
 *  user.
 *
 *  @returns GTLRPeopleQuery_PeopleGetBatchGet
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END
